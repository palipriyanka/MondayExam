@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<@using X.PagedList.Mvc.Core; @using PracticeMvc.Models -->
    @model IEnumerable<Employee1>
    @*@{
            ViewData["Title"] = "Paging";
            Layout = "~/Views/Shared/_Layout.cshtml";
            var pageNumber = ViewContext.HttpContext.Request.Query["page"];
            var pageSize = ViewContext.HttpContext.Request.Query["pagesize"];
            if (string.IsNullOrEmpty(pageSize))
            {
                pageSize = "5";
            }

            if (string.IsNullOrEmpty(pageNumber))
            {
                pageNumber = "1";
            }
        }

        <h1>Paging</h1>
        <link href="~/css/IPagedList.css" rel="stylesheet" />
        <div class="row">
            <div class="col-md-6">
                <p>
                    <a asp-action="Create">Create New</a>
                </p>
            </div>
            <div class="col-md-3">
                <label class="mr-2 mt-2 text-info small"> Page number: @pageNumber | @Model.Count() records</label>
            </div>
            <div class="col-md-3 text-right">
                <div class="form-group form-inline">
                    <label class="mr-2">Page Size: </label>
                    <select name="PageSize" id="PageSize" class="form-control">
                        @for (var i = 1; i <= 10; i++)
                        {
                            <option value="@(i*5)">@(i*5)</option>
                        }
                    </select>
                </div>
            </div>
        </div>


        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.salary)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.salary)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div>
            @Html.PagedListPager(Model, page => Url.Action("Paging", "Employee1", new { page }) + "&pagesize=" + pageSize,
                X.PagedList.Web.Common.PagedListRenderOptionsBase.PageNumbersOnly)
        </div>

        <script>
            $(function () {

                // set default value for Page size dropdown
                var pageSizeJ = '@pageSize';
                if (pageSizeJ.length > 0) {
                    $("#PageSize").val(pageSizeJ);
                }

                // fire on pageSize change
                $("#PageSize").on("change", function () {
                    window.location.href = '/Employee1/Paging?page=@pageNumber&pagesize=' + this.value;
                });
            });
        </script>

        @Html.PagedListPager(Model, page => Url.Action("Paging", new { page = page }))*@


    @*@model IEnumerable<PracticeMvc.Models.Employee1>*@

    @*@{
        ViewData["Title"] = "paging";
    }


    <h1>Index</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.salary)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.salary)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @Html.PagedListPager(Model, page => Url.Action("Paging", new { page = page }))*@
